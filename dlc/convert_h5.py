"""There are several formatting differences between the h5 files generated by our labeling job, and that generated by dlc native label generation. As follows:   
    - Due to a numpy/python version difference (3.7 vs. 3.8) pandas tables are saved with a different pickle protocol than what is available on this machine (3.7 vs. 3.8). We load and resave pickle files in this environment using a different python environment, then return to the previous environment.  
    - Due to a path formatting error, we need the prefix "labeled-data" on paths to image files. we add this in manually. 
    - The labeling job outputs are natively object arrays. They must be np.float64 arrays to match dlc native processing. 

There is an issue where h5 labels generated by the labeling job need a different pickle protocol (5) than what is available from python 3.6/7 (https://stackoverflow.com/questions/60067953/is-it-possible-to-specify-the-pickle-protocol-when-writing-pandas-to-hdf5). 
"""
import importlib
import pickle
import os
import numpy as np

import pandas as pd
import sys


class PickleProtocol:
    def __init__(self, level):
        self.previous = pickle.HIGHEST_PROTOCOL
        self.level = level

    def __enter__(self):
        importlib.reload(pickle)
        pickle.HIGHEST_PROTOCOL = self.level

    def __exit__(self, *exc):
        importlib.reload(pickle)
        pickle.HIGHEST_PROTOCOL = self.previous


def pickle_protocol(level):
    return PickleProtocol(level)

def add_labeled_data_prefix(filename):
    """If prefix "labeled-data" does not exist, add it. 

    """
    if not filename.startswith("labeled-data"):
        return os.path.join("labeled-data",filename)
    else:
        return filename

def convert(filename):
    h5_file = pd.read_hdf(filename)
    h5_file.rename(index=add_labeled_data_prefix,inplace = True)
    output = h5_file.astype(np.float64)
    ## Check if data row names are correct: 
    with pickle_protocol(4):
        output.to_hdf(filename,"df")

if __name__ == "__main__":
    """first argument should be of format "path/to/directory/{Taskname}_{Scorer}-{Date}" that contains a "labeled-data" folder. 

    """
    taskdirpath = sys.argv[1]
    ## if we don't need to get the name: 
    #try:
    #    config_file = os.path.join(taskdirpath,"config.yaml")
    #    with open(config_file,"r") as f:
    #        configdict = yaml.safe_load(f)
    #except yaml.YAMLError as e:     
    #    print("Config file not found at location {}".format(config_file))
    #    raise
    #scorer = configdict["scorer"]


    labelfiles = [os.path.join(dp,f) for dp,dn,fn in os.walk(os.path.join(taskdirpath,"labeled-data")) for f in fn if f.endswith("h5")]
    for labelfile in labelfiles:
        try:
            print("Converting h5 file format: {}".format(labelfile))
            convert(labelfile)
        except Exception as e:    
            print("Error converting file {}: {}. Continuing".format(labelfile,e))
            continue




